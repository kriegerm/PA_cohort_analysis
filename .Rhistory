knitr::opts_chunk$set(message = FALSE,
warning = FALSE,
error = FALSE,
fig.path = "./figures/01/",
fig.keep = "all",
dev = c("png"),
cache = FALSE,
# Do not use lazy loading which fails for large objects
cache.lazy = FALSE)
library("pacman")
pacman::p_load("rmarkdown", "tidyverse", "phyloseq", "knitr","kableExtra", "here", "plyr", "ggpubr", "microViz", "microbiome", "pheatmap", "vegan", "reshape2", "magrittr", "microshades", "pheatmap","vegan", "data.table", "Polychrome", "fantaxtic","cetcolor", "cowplot", "MicrobiomeStat", "randomForest", "caret", "mlbench", "MLmetrics", "mia", "here", "patchwork", "digest", "ANCOMBC", "Maaslin2", "microbiomeMarker")
here::i_am("01_phyloseq.Rmd")
knitr::opts_chunk$set(message = FALSE,
warning = FALSE,
error = FALSE,
fig.path = "./figures/00/",
fig.keep = "all",
dev = c("png"),
cache = FALSE,
# Do not use lazy loading which fails for large objects
cache.lazy = FALSE)
library("pacman")
pacman::p_load("rmarkdown", "tidyverse", "phyloseq", "knitr","kableExtra", "here", "plyr", "microViz")
here::i_am("00_process_reads.Rmd")
library(microViz)
knitr::opts_chunk$set(message = FALSE,
warning = FALSE,
error = FALSE,
fig.path = "./figures/02/",
fig.keep = "all",
dev = c("png"),
cache = FALSE,
# Do not use lazy loading which fails for large objects
cache.lazy = FALSE)
library("pacman")
pacman::p_load("rmarkdown", "tidyverse", "phyloseq", "knitr","kableExtra", "here", "plyr", "ggpubr", "microViz", "readxl", "microbiome", "pheatmap", "vegan", "reshape2", "magrittr", "microshades", "pheatmap","vegan", "data.table", "Polychrome", "fantaxtic","cetcolor", "ldatuning", "cowplot", "MicrobiomeStat", "randomForest", "caret", "mlbench", "MLmetrics", "mia", "here", "patchwork", "digest", "ANCOMBC", "Maaslin2", "microbiomeMarker", "tidytext")
here::i_am("02_TopicModeling.Rmd")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("phyloseq")
library(phyloseq)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("phyloseq")
library(phyloseq)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("phyloseq")
source('http://bioconductor.org/biocLite.R')
source('http://bioconductor.org/biocLite.R')
biocLite("phyloseq")
library("devtools")
install_github("phyloseq/joey711")
temp <- tempfile()
macURL = "http://bioconductor.org/packages/devel/bioc/bin/macosx/leopard/contrib/3.0/phyloseq_1.5.3.tgz"
download.file(macURL, temp)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("phyloseq")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("scater")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("phyloseq")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GenomeInfoDbData")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("phyloseq")
library(phyloseq)
install.packages(
"microViz",
repos = c(davidbarnett = "https://david-barnett.r-universe.dev", getOption("repos"))
)
library(microViz)
knitr::opts_chunk$set(message = FALSE,
warning = FALSE,
error = FALSE,
fig.path = "./figures/01/",
fig.keep = "all",
dev = c("png"),
cache = FALSE,
# Do not use lazy loading which fails for large objects
cache.lazy = FALSE)
library("pacman")
pacman::p_load("rmarkdown", "tidyverse", "phyloseq", "knitr","kableExtra", "here", "plyr", "ggpubr", "microViz", "microbiome", "pheatmap", "vegan", "reshape2", "magrittr", "microshades", "pheatmap","vegan", "data.table", "Polychrome", "fantaxtic","cetcolor", "cowplot", "MicrobiomeStat", "randomForest", "caret", "mlbench", "MLmetrics", "mia", "here", "patchwork", "digest", "ANCOMBC", "Maaslin2", "microbiomeMarker")
here::i_am("01_phyloseq.Rmd")
source("MK_Microbiome_Functions.R")
colors_all= c("Abscess" = "#FF495C", "Plaque"="#083D77")
core_colors = c("#FAAA00", "#3399FF","#F76F8E","#083D77","#B8D4E3", "#FF495C","#477071", '#03CEA4',  "#5F00BA", "#BDAC9E", "white", "#FFD900")
maaslin2_colors= c("CLR_LOG" = "#2c45b5", "CLR_NONE"="#86B8FD",
"CSS_LOG" = "#FF495C", "CSS_NONE"="#F2929A",
"TMM_LOG" = "#F4B701", "TMM_NONE"="#FEE59A",
"TSS_LOG" = "#8FD694", "TSS_NONE"="#D2EED4",
"TSS_LOGIT" = "#354F52", "TSS_AST"="#CEDDDF")
pal20 <- createPalette(22, c("#F76F8E","#03CEA4", "#083D77"), range = c(30, 80))
pal20 <- unname(as.list(pal20))
resolution <- c("Phylum", "Class", "Order", "Family", "Genus", "Species")
set.seed(1234)
date = Sys.Date()
# Load the saved Rds file
loaded_objects <- readRDS("00data.rds")
# Assign back the objects to the environment, if needed
list2env(loaded_objects, .GlobalEnv)
process_phyloseq(ps_fs)
ps_genus <- tax_glom(ps_fs, taxrank = "Genus")
# Extract count matrix and convert to matrix
otu_mat <- as(otu_table(ps_genus), "matrix")
# Transpose if samples are rows (optional, depending on orientation)
if(taxa_are_rows(ps_genus)) {
otu_mat <- t(otu_mat)
}
# Extract Genus names
taxa_names <- as.data.frame(tax_table(ps_genus))$Genus
rownames(otu_mat) <- make.unique(taxa_names)
ps_genus <- tax_glom(ps_fs, taxrank = "Genus")
# Extract count matrix and convert to matrix
otu_mat <- as(otu_table(ps_genus), "matrix")
# Transpose if samples are rows (optional, depending on orientation)
if(taxa_are_rows(ps_genus)) {
otu_mat <- t(otu_mat)
}
# Extract Genus names
taxa_names <- as.data.frame(tax_table(ps_genus))$Genus
# Plot heatmap
pheatmap(log(otu_mat + .0000001),
scale = "none",        # keep raw counts
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
fontsize_row = 8,
fontsize_col = 8,
show_rownames = TRUE,
show_colnames = TRUE)
plots <- lapply(resolution, function(rank) {
plot_pca(phyloseq_obj = ps_f,
rank_transformation = rank,
variable = "Type",
colors_list = colors_all)})
combined_plot <- wrap_plots(plots, ncol = 2) & theme(legend.position = "bottom")
combined_plot
plots <- lapply(resolution, function(rank) {
plot_PCoA(phyloseq_obj = ps_f,
rank_transformation = rank,
trans_type = "identity",
dist_cal_type = "bray",
ord_calc_method = "NMDS",
variable = "Type",
colors_list = colors_all)})
combined_plot <- wrap_plots(plots, ncol = 2) & theme(legend.position = "bottom")
print(combined_plot)
plots <- lapply(resolution, function(rank) {
plot_PCoA(phyloseq_obj = ps_f,
rank_transformation = rank,
trans_type = "identity",
dist_cal_type = "jaccard",
ord_calc_method = "NMDS",
variable = "Type",
colors_list = colors_all)})
combined_plot <- wrap_plots(plots, ncol = 2) & theme(legend.position = "bottom")
print(combined_plot)
a_my_comparisons <- list( c("Abscess", "Plaque"))
symnum.args = list(cutpoints = c(0, 0.001, 0.01, 0.05, 0.1, 1), symbols = c("****", "***", "**", "*", "ns"))
p_Shannon <- plot_richness(ps_f, x="Type", measures="Shannon", color = "Type")+
geom_boxplot(alpha=0.6)+
theme_bw(base_size=14) +
theme(legend.position="none",
axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1, size = 12),
axis.title.x = element_blank(),
axis.title.y = element_text(size=12),
strip.background = element_rect(fill = "white", color = "white"),
strip.text = element_text(size = 14, face = "bold"))  +
stat_compare_means(method = "wilcox.test", comparisons = a_my_comparisons, label = "p.format")+
scale_color_manual(values = colors_all) +
ylim(0, 6.2)
p_Chao1 <- plot_richness(ps_f, x="Type", measures="Chao1", color = "Type")+
geom_boxplot(alpha=0.6)+
theme_bw(base_size=14) +
theme(legend.position="none",
axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1, size = 12),
axis.title.x = element_blank(),
axis.title.y = element_text(size=12),
strip.background = element_rect(fill = "white", color = "white"),
strip.text = element_text(size = 14, face = "bold"))  +
stat_compare_means(method = "wilcox.test", comparisons = a_my_comparisons, label = "p.format")+
scale_color_manual(values = colors_all) +
ylim(0, 470)
p_Observed <- plot_richness(ps_f, x="Type", measures="Observed", color = "Type")+
geom_boxplot(alpha=0.6)+
theme_bw(base_size=14) +
theme(legend.position="none",
axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1, size = 12),
axis.title.x = element_blank(),
axis.title.y = element_text(size=12),
strip.background = element_rect(fill = "white", color = "white"),
strip.text = element_text(size = 14, face = "bold"))  +
stat_compare_means(method = "wilcox.test", comparisons = a_my_comparisons, label = "p.format")+
scale_color_manual(values = colors_all) +
ylim(0, 470)
plot <- ggarrange(p_Shannon, p_Observed, p_Chao1, ncol=3, nrow=1, common.legend = TRUE, legend="bottom")
annotate_figure(plot, top = text_grob(paste0("Alpha Diversity"), color = "black", face = "bold", size = 14))
top_df <- ps_fs_t_n %>%
tax_glom(., "Phylum") %>%
get_top_taxa(., 10, relative = TRUE, discard_other = TRUE) %>% psmelt(.)
if(!"devtools" %in% installed.packages()){
install.packages("devtools")
}
devtools::install_github("gmteunisse/fantaxtic")
top_df <- ps_fs_t_n %>%
tax_glom(., "Phylum") %>%
get_top_taxa(., 10, relative = TRUE, discard_other = TRUE) %>% psmelt(.)
library(fantaxtic)
top_df <- ps_fs_t_n %>%
tax_glom(., "Phylum") %>%
get_top_taxa(., 10, relative = TRUE, discard_other = TRUE) %>% psmelt(.)
top_df$Phylum <- gsub("p__","",as.character(top_df$Phylum))
top_df %>%
dplyr::group_by(Type,Phylum)%>%
dplyr::summarise(Average_Abundance = mean(Abundance))%>%
ggbarplot(x= "Type", y="Average_Abundance",
fill = "Phylum",
panel.labs.font = list(size=12),
panel.labs.background = list(color = NULL, fill = "white"),
font.tickslab = 14,
font.legend = c(10),
palette = core_colors,
strip.position = "top",
color = "black",
x.text.angle = 45,
y.text.angle = 0,
font.x = 14,
font.y = 12,
font.title = 16,
rotate = FALSE,
title = "Phlyum Level",
xlab = "",
ylab = "Average Relative Abundance",
ggtheme = theme_bw()) +
font("title", face="bold") +
theme(plot.title=element_text(hjust=0.5), plot.subtitle=element_text(hjust=0.5))
knitr::opts_chunk$set(message = FALSE,
warning = FALSE,
error = FALSE,
fig.path = "./figures/02/",
fig.keep = "all",
dev = c("png"),
cache = FALSE,
# Do not use lazy loading which fails for large objects
cache.lazy = FALSE)
library("pacman")
pacman::p_load("rmarkdown", "tidyverse", "phyloseq", "knitr","kableExtra", "here", "plyr", "ggpubr", "microViz", "readxl", "microbiome", "pheatmap", "vegan", "reshape2", "magrittr", "microshades", "pheatmap","vegan", "data.table", "Polychrome", "fantaxtic","cetcolor", "ldatuning", "cowplot", "MicrobiomeStat", "randomForest", "caret", "mlbench", "MLmetrics", "mia", "here", "patchwork", "digest", "ANCOMBC", "Maaslin2", "microbiomeMarker", "tidytext")
here::i_am("02_TopicModeling.Rmd")
source("MK_Microbiome_Functions.R")
colors_all= c("Abscess" = "#FF495C", "Tumor"="#F0C808","Plaque"="#083D77", "AN"="#43AA8B" )
plot_colors= c("Abscess" = "#FF495C", "Plaque"="#083D77","abscess" = "#FF495C", "plaque"="#083D77",
"abnormal" = "#FF495C", "control"="#083D77",  "Abnormal" = "#FF495C", "Control"="#083D77"  )
core_colors = c("#FAAA00", "#3399FF","#F76F8E","#083D77","#B8D4E3", "#FF495C","#477071", '#03CEA4',  "#5F00BA", "#BDAC9E", "white", "#FFD900")
maaslin2_colors= c("CLR_LOG" = "#2c45b5", "CLR_NONE"="#86B8FD",
"CSS_LOG" = "#FF495C", "CSS_NONE"="#F2929A",
"TMM_LOG" = "#F4B701", "TMM_NONE"="#FEE59A",
"TSS_LOG" = "#8FD694", "TSS_NONE"="#D2EED4",
"TSS_LOGIT" = "#354F52", "TSS_AST"="#CEDDDF")
pal20 <- createPalette(22, c("#F76F8E","#03CEA4", "#083D77"), range = c(30, 80))
pal20 <- unname(as.list(pal20))
resolution <- c("Phylum", "Class", "Order", "Family", "Genus", "Species")
set.seed(1234)
date = Sys.Date()
# Load the saved Rds file
loaded_objects <- readRDS("00data.rds")
# Assign back the objects to the environment, if needed
list2env(loaded_objects, .GlobalEnv)
ps_obj_ped_fs <- subset_samples(ps_fs, Study == "Pediatric")
ps_obj_ped_adult_fs <- subset_samples(ps_fs, Study != "OSCC")
results_scaling <- prep_data_scale(ps_obj_ped_fs, "Genus", 100, "Type")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("benchdamic")
knitr::opts_chunk$set(message = FALSE,
warning = FALSE,
error = FALSE,
fig.path = "./figures/02/",
fig.keep = "all",
dev = c("png"),
cache = FALSE,
# Do not use lazy loading which fails for large objects
cache.lazy = FALSE)
library("pacman")
pacman::p_load("rmarkdown", "tidyverse", "phyloseq", "knitr","kableExtra", "here", "plyr", "ggpubr", "microViz", "readxl", "microbiome", "pheatmap", "vegan", "reshape2", "magrittr", "microshades", "pheatmap","vegan", "data.table", "Polychrome", "fantaxtic","cetcolor", "ldatuning", "cowplot", "MicrobiomeStat", "randomForest", "caret", "mlbench", "MLmetrics", "mia", "here", "patchwork", "digest", "ANCOMBC", "Maaslin2", "microbiomeMarker", "tidytext", "benchdamic")
here::i_am("02_TopicModeling.Rmd")
source("MK_Microbiome_Functions.R")
colors_all= c("Abscess" = "#FF495C", "Tumor"="#F0C808","Plaque"="#083D77", "AN"="#43AA8B" )
plot_colors= c("Abscess" = "#FF495C", "Plaque"="#083D77","abscess" = "#FF495C", "plaque"="#083D77",
"abnormal" = "#FF495C", "control"="#083D77",  "Abnormal" = "#FF495C", "Control"="#083D77"  )
core_colors = c("#FAAA00", "#3399FF","#F76F8E","#083D77","#B8D4E3", "#FF495C","#477071", '#03CEA4',  "#5F00BA", "#BDAC9E", "white", "#FFD900")
maaslin2_colors= c("CLR_LOG" = "#2c45b5", "CLR_NONE"="#86B8FD",
"CSS_LOG" = "#FF495C", "CSS_NONE"="#F2929A",
"TMM_LOG" = "#F4B701", "TMM_NONE"="#FEE59A",
"TSS_LOG" = "#8FD694", "TSS_NONE"="#D2EED4",
"TSS_LOGIT" = "#354F52", "TSS_AST"="#CEDDDF")
pal20 <- createPalette(22, c("#F76F8E","#03CEA4", "#083D77"), range = c(30, 80))
pal20 <- unname(as.list(pal20))
resolution <- c("Phylum", "Class", "Order", "Family", "Genus", "Species")
set.seed(1234)
date = Sys.Date()
# Load the saved Rds file
loaded_objects <- readRDS("00data.rds")
# Assign back the objects to the environment, if needed
list2env(loaded_objects, .GlobalEnv)
ps_obj_ped_fs <- subset_samples(ps_fs, Study == "Pediatric")
ps_obj_ped_adult_fs <- subset_samples(ps_fs, Study != "OSCC")
results_scaling <- prep_data_scale(ps_obj_ped_fs, "Genus", 100, "Type")
pacman::p_load("rmarkdown", "tidyverse", "phyloseq", "knitr","kableExtra", "here", "plyr", "ggpubr", "microViz", "readxl", "microbiome", "pheatmap", "vegan", "reshape2", "magrittr", "microshades", "pheatmap","vegan", "data.table", "Polychrome", "fantaxtic","cetcolor", "ldatuning", "cowplot", "MicrobiomeStat", "randomForest", "caret", "mlbench", "MLmetrics", "mia", "here", "patchwork", "digest", "ANCOMBC", "Maaslin2", "microbiomeMarker", "tidytext", "benchdamic")
norm_tss()
library(microbiomeMarker)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("microbiomeMarker")
library(microbiomeMarker)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("microbiomeMarker")
if (!requireNamespace("remotes", quietly=TRUE))
install.packages("remotes")
remotes::install_github("yiluheihei/microbiomeMarker")
library(microbiomeMarker)
knitr::opts_chunk$set(message = FALSE,
warning = FALSE,
error = FALSE,
fig.path = "./figures/02/",
fig.keep = "all",
dev = c("png"),
cache = FALSE,
# Do not use lazy loading which fails for large objects
cache.lazy = FALSE)
library("pacman")
pacman::p_load("rmarkdown", "tidyverse", "phyloseq", "knitr","kableExtra", "here", "plyr", "ggpubr", "microViz", "readxl", "microbiome", "pheatmap", "vegan", "reshape2", "magrittr", "microshades", "pheatmap","vegan", "data.table", "Polychrome", "fantaxtic","cetcolor", "ldatuning", "cowplot", "MicrobiomeStat", "randomForest", "caret", "mlbench", "MLmetrics", "mia", "here", "patchwork", "digest", "ANCOMBC", "Maaslin2", "microbiomeMarker", "tidytext")
here::i_am("02_TopicModeling.Rmd")
source("MK_Microbiome_Functions.R")
colors_all= c("Abscess" = "#FF495C", "Tumor"="#F0C808","Plaque"="#083D77", "AN"="#43AA8B" )
plot_colors= c("Abscess" = "#FF495C", "Plaque"="#083D77","abscess" = "#FF495C", "plaque"="#083D77",
"abnormal" = "#FF495C", "control"="#083D77",  "Abnormal" = "#FF495C", "Control"="#083D77"  )
core_colors = c("#FAAA00", "#3399FF","#F76F8E","#083D77","#B8D4E3", "#FF495C","#477071", '#03CEA4',  "#5F00BA", "#BDAC9E", "white", "#FFD900")
maaslin2_colors= c("CLR_LOG" = "#2c45b5", "CLR_NONE"="#86B8FD",
"CSS_LOG" = "#FF495C", "CSS_NONE"="#F2929A",
"TMM_LOG" = "#F4B701", "TMM_NONE"="#FEE59A",
"TSS_LOG" = "#8FD694", "TSS_NONE"="#D2EED4",
"TSS_LOGIT" = "#354F52", "TSS_AST"="#CEDDDF")
pal20 <- createPalette(22, c("#F76F8E","#03CEA4", "#083D77"), range = c(30, 80))
pal20 <- unname(as.list(pal20))
resolution <- c("Phylum", "Class", "Order", "Family", "Genus", "Species")
set.seed(1234)
date = Sys.Date()
# Load the saved Rds file
loaded_objects <- readRDS("00data.rds")
# Assign back the objects to the environment, if needed
list2env(loaded_objects, .GlobalEnv)
ps_obj_ped_fs <- subset_samples(ps_fs, Study == "Pediatric")
ps_obj_ped_adult_fs <- subset_samples(ps_fs, Study != "OSCC")
results_scaling <- prep_data_scale(ps_obj_ped_fs, "Genus", 100, "Type")
meta_data <- results_scaling$meta_data
counts_data <- results_scaling$counts_data
topics <- seq(from = 2, to = 10, by = 1)
RunFindTopicsNumber(counts_data, topics, "Gibbs")
source("MK_Microbiome_Functions.R")
topics <- seq(from = 2, to = 50, by = 2)
RunFindTopicsNumber(counts_data, topics, "Gibbs")
install.packages("ldatuning")
knitr::opts_chunk$set(message = FALSE,
warning = FALSE,
error = FALSE,
fig.path = "./figures/02/",
fig.keep = "all",
dev = c("png"),
cache = FALSE,
# Do not use lazy loading which fails for large objects
cache.lazy = FALSE)
library("pacman")
pacman::p_load("rmarkdown", "tidyverse", "phyloseq", "knitr","kableExtra", "here", "plyr", "ggpubr", "microViz", "readxl", "microbiome", "pheatmap", "vegan", "reshape2", "magrittr", "microshades", "pheatmap","vegan", "data.table", "Polychrome", "fantaxtic","cetcolor", "ldatuning", "cowplot", "MicrobiomeStat", "randomForest", "caret", "mlbench", "MLmetrics", "mia", "here", "patchwork", "digest", "ANCOMBC", "Maaslin2", "microbiomeMarker", "tidytext")
here::i_am("02_TopicModeling.Rmd")
source("MK_Microbiome_Functions.R")
colors_all= c("Abscess" = "#FF495C", "Tumor"="#F0C808","Plaque"="#083D77", "AN"="#43AA8B" )
plot_colors= c("Abscess" = "#FF495C", "Plaque"="#083D77","abscess" = "#FF495C", "plaque"="#083D77",
"abnormal" = "#FF495C", "control"="#083D77",  "Abnormal" = "#FF495C", "Control"="#083D77"  )
core_colors = c("#FAAA00", "#3399FF","#F76F8E","#083D77","#B8D4E3", "#FF495C","#477071", '#03CEA4',  "#5F00BA", "#BDAC9E", "white", "#FFD900")
maaslin2_colors= c("CLR_LOG" = "#2c45b5", "CLR_NONE"="#86B8FD",
"CSS_LOG" = "#FF495C", "CSS_NONE"="#F2929A",
"TMM_LOG" = "#F4B701", "TMM_NONE"="#FEE59A",
"TSS_LOG" = "#8FD694", "TSS_NONE"="#D2EED4",
"TSS_LOGIT" = "#354F52", "TSS_AST"="#CEDDDF")
pal20 <- createPalette(22, c("#F76F8E","#03CEA4", "#083D77"), range = c(30, 80))
pal20 <- unname(as.list(pal20))
resolution <- c("Phylum", "Class", "Order", "Family", "Genus", "Species")
set.seed(1234)
date = Sys.Date()
# Load the saved Rds file
loaded_objects <- readRDS("00data.rds")
# Assign back the objects to the environment, if needed
list2env(loaded_objects, .GlobalEnv)
ps_obj_ped_fs <- subset_samples(ps_fs, Study == "Pediatric")
ps_obj_ped_adult_fs <- subset_samples(ps_fs, Study != "OSCC")
results_scaling <- prep_data_scale(ps_obj_ped_fs, "Genus", 100, "Type")
meta_data <- results_scaling$meta_data
counts_data <- results_scaling$counts_data
topics <- seq(from = 2, to = 10, by = 1)
RunFindTopicsNumber(counts_data, topics, "Gibbs")
library(ldatuning)
install.packages("remotes")
remotes::install_github("nikita-moor/ldatuning")
install.packages("remotes")
library(ldatuning)
knitr::opts_chunk$set(message = FALSE,
warning = FALSE,
error = FALSE,
fig.path = "./figures/02/",
fig.keep = "all",
dev = c("png"),
cache = FALSE,
# Do not use lazy loading which fails for large objects
cache.lazy = FALSE)
library("pacman")
pacman::p_load("rmarkdown", "tidyverse", "phyloseq", "knitr","kableExtra", "here", "plyr", "ggpubr", "microViz", "readxl", "microbiome", "pheatmap", "vegan", "reshape2", "magrittr", "microshades", "pheatmap","vegan", "data.table", "Polychrome", "fantaxtic","cetcolor", "ldatuning", "cowplot", "MicrobiomeStat", "randomForest", "caret", "mlbench", "MLmetrics", "mia", "here", "patchwork", "digest", "ANCOMBC", "Maaslin2", "microbiomeMarker", "tidytext")
here::i_am("02_TopicModeling.Rmd")
source("MK_Microbiome_Functions.R")
colors_all= c("Abscess" = "#FF495C", "Tumor"="#F0C808","Plaque"="#083D77", "AN"="#43AA8B" )
plot_colors= c("Abscess" = "#FF495C", "Plaque"="#083D77","abscess" = "#FF495C", "plaque"="#083D77",
"abnormal" = "#FF495C", "control"="#083D77",  "Abnormal" = "#FF495C", "Control"="#083D77"  )
core_colors = c("#FAAA00", "#3399FF","#F76F8E","#083D77","#B8D4E3", "#FF495C","#477071", '#03CEA4',  "#5F00BA", "#BDAC9E", "white", "#FFD900")
maaslin2_colors= c("CLR_LOG" = "#2c45b5", "CLR_NONE"="#86B8FD",
"CSS_LOG" = "#FF495C", "CSS_NONE"="#F2929A",
"TMM_LOG" = "#F4B701", "TMM_NONE"="#FEE59A",
"TSS_LOG" = "#8FD694", "TSS_NONE"="#D2EED4",
"TSS_LOGIT" = "#354F52", "TSS_AST"="#CEDDDF")
pal20 <- createPalette(22, c("#F76F8E","#03CEA4", "#083D77"), range = c(30, 80))
pal20 <- unname(as.list(pal20))
resolution <- c("Phylum", "Class", "Order", "Family", "Genus", "Species")
set.seed(1234)
date = Sys.Date()
# Load the saved Rds file
loaded_objects <- readRDS("00data.rds")
# Assign back the objects to the environment, if needed
list2env(loaded_objects, .GlobalEnv)
ps_obj_ped_fs <- subset_samples(ps_fs, Study == "Pediatric")
ps_obj_ped_adult_fs <- subset_samples(ps_fs, Study != "OSCC")
results_scaling <- prep_data_scale(ps_obj_ped_fs, "Genus", 100, "Type")
meta_data <- results_scaling$meta_data
counts_data <- results_scaling$counts_data
topics <- seq(from = 2, to = 10, by = 1)
RunFindTopicsNumber(counts_data, topics, "Gibbs")
result <- create_topic_model(counts_data, 4, TRUE, "Gibbs")
model <- result$lda_model
plot_beta(result, 5)
heatmap_gamma(result, "Type")
library(umap)
plot_gamma_umap(results, "Type", plot_colors)
topic_membership(result, "Type", plot_colors)
relab_heatmap(result, ps_obj_ped_fs, "Genus", "Type", 3, 5)
relab_heatmap(result, ps_obj_ped_fs, "Genus", "Type", 2, 5)
library(topicmodels)
posterior_results <- posterior(model)
topics_terms <- posterior_results$terms
# Blank out most term names
term_names <- colnames(topics_terms)
term_labels <- ifelse((seq_along(term_names) %% 5) == 0, term_names, "")
# Apply these as column names
colnames(topics_terms) <- term_labels
pheatmap(log(topics_terms),
cluster_rows = TRUE,
cluster_cols = TRUE,
scale = "none",
show_rownames = TRUE,
show_colnames = TRUE)
topics <- seq(from = 2, to = 50, by = 2)
RunFindTopicsNumber(counts_data, topics, "Gibbs")
result <- create_topic_model(counts_data, k_value= 8, 1, "Gibbs")
model <- result$lda_model
plot_beta(result, 5)
heatmap_gamma(result, "Type")
plot_gamma_umap(results, "Type", plot_colors)
topic_membership(result, "Type", plot_colors)
source("MK_Microbiome_Functions.R")
relab_heatmap(result, ps_obj_ped_fs, "Genus", "Type", 3, 5)
