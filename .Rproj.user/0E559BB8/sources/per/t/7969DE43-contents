---
title: "01 Phyloseq Pediatric"
author: "Madeline Krieger"
date: "`r Sys.Date()`"
output:
  html_document:
    toc: true
    toc_float:
      collapsed: false
      smooth_scroll: true
    theme: "cosmo"
    code_folding: "show"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(message = FALSE,
                      warning = FALSE,
                      error = FALSE,
                      fig.path = "./figures/01/",
                      fig.keep = "all",
                      dev = c("png"),
                      cache = FALSE,
                      # Do not use lazy loading which fails for large objects
                      cache.lazy = FALSE)
```


# 1.0 Load and Define

## 1.1 Load packages and presets
### 1.1.1 Packages
```{r 1.1_load-packages}
library("pacman")
pacman::p_load("rmarkdown", "tidyverse", "phyloseq", "knitr","kableExtra", "here", "plyr", "ggpubr", "microViz", "microbiome", "pheatmap", "vegan", "reshape2", "magrittr", "microshades", "pheatmap","vegan", "data.table", "Polychrome", "fantaxtic","cetcolor", "cowplot", "MicrobiomeStat", "randomForest", "caret", "mlbench", "MLmetrics", "mia", "here", "patchwork", "digest", "ANCOMBC", "Maaslin2", "microbiomeMarker", "fantaxtic")

here::i_am("01_phyloseq.Rmd")
``` 


### 1.1.2 My packages
```{r}
source("MK_Microbiome_Functions.R")
```



### 1.1.2 Colors and presents
```{r}
colors_all= c("Abscess" = "#FF495C", "Plaque"="#083D77")


core_colors = c("#FAAA00", "#3399FF","#F76F8E","#083D77","#B8D4E3", "#FF495C","#477071", '#03CEA4',  "#5F00BA", "#BDAC9E", "white", "#FFD900")

maaslin2_colors= c("CLR_LOG" = "#2c45b5", "CLR_NONE"="#86B8FD", 
                   "CSS_LOG" = "#FF495C", "CSS_NONE"="#F2929A",
                   "TMM_LOG" = "#F4B701", "TMM_NONE"="#FEE59A",
                   "TSS_LOG" = "#8FD694", "TSS_NONE"="#D2EED4",
                   "TSS_LOGIT" = "#354F52", "TSS_AST"="#CEDDDF")

pal20 <- createPalette(22, c("#F76F8E","#03CEA4", "#083D77"), range = c(30, 80))
pal20 <- unname(as.list(pal20))

resolution <- c("Phylum", "Class", "Order", "Family", "Genus", "Species")

set.seed(1234)
date = Sys.Date()
```


## 1.2 Load data and process

### 1.2.1 Load Data from 00
```{r}
# Load the saved Rds file
loaded_objects <- readRDS("00data.rds")

# Assign back the objects to the environment, if needed
list2env(loaded_objects, .GlobalEnv)
```


### 1.2.2 Process Phyloseq
```{r}
process_phyloseq(ps_fs)
```


# Quick code for heatmap
```{r}
ps_genus <- tax_glom(ps_fs, taxrank = "Genus")

# Extract count matrix and convert to matrix
otu_mat <- as(otu_table(ps_genus), "matrix")

# Transpose if samples are rows (optional, depending on orientation)
if(taxa_are_rows(ps_genus)) {
  otu_mat <- t(otu_mat)
}

# Extract Genus names
taxa_names <- as.data.frame(tax_table(ps_genus))$Genus

# Plot heatmap
pheatmap(log(otu_mat + .0000001),
         scale = "none",        # keep raw counts
         clustering_distance_rows = "euclidean",
         clustering_distance_cols = "euclidean",
         clustering_method = "complete",
         fontsize_row = 8,
         fontsize_col = 8,
         show_rownames = TRUE,
         show_colnames = TRUE)
```


# 2.0 Ordinations

## 2.1 PCA 
```{r, fig.width=10, fig.height=15}
plots <- lapply(resolution, function(rank) {
  plot_pca(phyloseq_obj = ps_f, 
           rank_transformation = rank, 
           variable = "Type", 
           colors_list = colors_all)})

combined_plot <- wrap_plots(plots, ncol = 2) & theme(legend.position = "bottom") 
combined_plot
```


## 2.2 PCoA NMDS Bray 
```{r, fig.width=10, fig.height=15}
plots <- lapply(resolution, function(rank) {
  plot_PCoA(phyloseq_obj = ps_f,
    rank_transformation = rank,
    trans_type = "identity",        
    dist_cal_type = "bray",   
    ord_calc_method = "NMDS",
    variable = "Type", 
    colors_list = colors_all)})

combined_plot <- wrap_plots(plots, ncol = 2) & theme(legend.position = "bottom") 
print(combined_plot)
```


## 2.3 PCoA NMDS Jaccard 
```{r, fig.width=10, fig.height=15}
plots <- lapply(resolution, function(rank) {
  plot_PCoA(phyloseq_obj = ps_f,
    rank_transformation = rank,
    trans_type = "identity",        
    dist_cal_type = "jaccard",   
    ord_calc_method = "NMDS",
        variable = "Type", 
    colors_list = colors_all)})

combined_plot <- wrap_plots(plots, ncol = 2) & theme(legend.position = "bottom") 
print(combined_plot)
```



# 3.0 Alpha diversity
```{r}
a_my_comparisons <- list( c("Abscess", "Plaque"))
symnum.args = list(cutpoints = c(0, 0.001, 0.01, 0.05, 0.1, 1), symbols = c("****", "***", "**", "*", "ns"))

p_Shannon <- plot_richness(ps_f, x="Type", measures="Shannon", color = "Type")+
  geom_boxplot(alpha=0.6)+ 
    theme_bw(base_size=14) +
  theme(legend.position="none",         
        axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1, size = 12), 
        axis.title.x = element_blank(),
        axis.title.y = element_text(size=12), 
        strip.background = element_rect(fill = "white", color = "white"), 
        strip.text = element_text(size = 14, face = "bold"))  +
  stat_compare_means(method = "wilcox.test", comparisons = a_my_comparisons, label = "p.format")+
  scale_color_manual(values = colors_all) +
  ylim(0, 6.2)


p_Chao1 <- plot_richness(ps_f, x="Type", measures="Chao1", color = "Type")+
  geom_boxplot(alpha=0.6)+ 
    theme_bw(base_size=14) +
  theme(legend.position="none",         
        axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1, size = 12), 
        axis.title.x = element_blank(),
        axis.title.y = element_text(size=12), 
        strip.background = element_rect(fill = "white", color = "white"), 
        strip.text = element_text(size = 14, face = "bold"))  +
  stat_compare_means(method = "wilcox.test", comparisons = a_my_comparisons, label = "p.format")+
  scale_color_manual(values = colors_all) +
  ylim(0, 470)


p_Observed <- plot_richness(ps_f, x="Type", measures="Observed", color = "Type")+
  geom_boxplot(alpha=0.6)+ 
    theme_bw(base_size=14) +
  theme(legend.position="none",         
        axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1, size = 12), 
        axis.title.x = element_blank(),
        axis.title.y = element_text(size=12), 
        strip.background = element_rect(fill = "white", color = "white"), 
        strip.text = element_text(size = 14, face = "bold"))  +
  stat_compare_means(method = "wilcox.test", comparisons = a_my_comparisons, label = "p.format")+
  scale_color_manual(values = colors_all) +
  ylim(0, 470)

plot <- ggarrange(p_Shannon, p_Observed, p_Chao1, ncol=3, nrow=1, common.legend = TRUE, legend="bottom")
annotate_figure(plot, top = text_grob(paste0("Alpha Diversity"), color = "black", face = "bold", size = 14))
```

# 4.0 Taxa Plots

## 4.1 Average Bar Plots

### 4.1.1 Phylum 
```{r taxa_phylum, fig.height=4, fig.width=4}

top_df <- ps_fs_t_n %>%
  tax_glom(., "Phylum") %>%
  get_top_taxa(., 10, relative = TRUE, discard_other = TRUE) %>% psmelt(.)
top_df$Phylum <- gsub("p__","",as.character(top_df$Phylum))

top_df %>%
  dplyr::group_by(Type,Phylum)%>%
  dplyr::summarise(Average_Abundance = mean(Abundance))%>%
  ggbarplot(x= "Type", y="Average_Abundance",
            fill = "Phylum",
            panel.labs.font = list(size=12),
            panel.labs.background = list(color = NULL, fill = "white"),
            font.tickslab = 14,
            font.legend = c(10),
            palette = core_colors, 
            strip.position = "top",
            color = "black",
            x.text.angle = 45, 
            y.text.angle = 0, 
            font.x = 14,
            font.y = 12,
            font.title = 16,
            rotate = FALSE,
            title = "Phlyum Level", 
            xlab = "",
            ylab = "Average Relative Abundance",
            ggtheme = theme_bw()) + 
  font("title", face="bold") +
  theme(plot.title=element_text(hjust=0.5), plot.subtitle=element_text(hjust=0.5))
```

### 4.1.2 Genus 
```{r taxa_genus, fig.height=4, fig.width=3}

top_df <- ps_fs_t_n %>%
  tax_glom(., "Genus") %>%
  get_top_taxa(., 10, relative = TRUE, discard_other = TRUE) %>% psmelt(.)
top_df$Genus <- gsub("g__","",as.character(top_df$Genus))

top_df %>%
  dplyr::group_by(Type,Genus)%>%
  dplyr::summarise(Average_Abundance = mean(Abundance))%>%
  ggbarplot(x= "Type", y="Average_Abundance",
            fill = "Genus",
            panel.labs.font = list(size=12),
            panel.labs.background = list(color = NULL, fill = "white"),
            font.tickslab = 14,
            font.legend = c(10),
           # palette = core_colors, 
            strip.position = "top",
            color = "black",
            x.text.angle = 45, 
            y.text.angle = 0, 
            font.x = 14,
            font.y = 12,
            font.title = 16,
            rotate = FALSE,
            title = "Top 10 Genera", 
            xlab = "",
            ylab = "Average Relative Abundance",
            ggtheme = theme_bw()) + 
  font("title", face="bold") +
  theme(plot.title=element_text(hjust=0.5), plot.subtitle=element_text(hjust=0.5), legend.text = element_text(face = "italic"))
```

### 4.1.3 Microshades Genus MB
```{r, fig.width=8, fig.height=4}
# Use microshades function prep_mdf to agglomerate, normalize, and melt the phyloseq object
mdf_prep <- prep_mdf(ps_fs)

mdf_prep <- mdf_prep %>%
  mutate(Kingdom = gsub("k__", "", Kingdom)) %>%
  mutate(Phylum = gsub("p__", "", Phylum)) %>%
  mutate(Class = gsub("c__", "", Class)) %>%
  mutate(Order = gsub("o__", "", Order)) %>%
  mutate(Family = gsub("f__", "", Family)) %>%
  mutate(Genus = gsub("g__", "", Genus)) %>%
  mutate(Species = gsub("s__", "", Species)) 

print(unique(mdf_prep$Phylum))

# Create a color object for the specified data
color_obj <- create_color_dfs(mdf_prep, 
            selected_groups = c("Proteobacteria", "Actinobacteria","Bacteroidetes", "Fusobacteria",
                                "Spirochaetes"),
    cvd = FALSE, top_orientation=TRUE)

# Extract
mdf <- color_obj$mdf
cdf <- color_obj$cdf

plot_1 <- plot_microshades(mdf, cdf)

plot_1 + scale_y_continuous(labels = scales::percent, expand = expansion(0)) +
  theme_bw() +
  theme(legend.key.size = unit(0.2, "cm"), text=element_text(size=10), ) +
  theme(axis.text.x = element_text(size= 6)) +
  facet_wrap(~Type, scales= "free_x") 
```



### 4.1.4 Species 
```{r species}
top_df <- ps_fs_t_n %>%
  tax_glom(., "Species") %>%
  get_top_taxa(., 10, relative = TRUE, discard_other = TRUE) %>% psmelt(.)
top_df$Species <- gsub("s__","",as.character(top_df$Species))

top_df %>%
  dplyr::group_by(Type,Species)%>%
  dplyr::summarise(Average_Abundance = mean(Abundance))%>%
  ggbarplot(x= "Type", y="Average_Abundance",
            fill = "Species",
            panel.labs.font = list(size=12),
            panel.labs.background = list(color = NULL, fill = "white"),
            font.tickslab = 10,
            font.legend = c(10),
            palette = pal20, 
            strip.position = "top",
            color = "black",
            x.text.angle = 90, 
            y.text.angle = 0, 
            font.x = 12,
            font.y = 12,
            font.title = 16,
            rotate = TRUE,
            title = "", 
            subtitle = "Species level",
            xlab = "Condition",
            ylab = "Average Abundance",
            ggtheme = theme_bw()) + 
  font("title", face="bold") +
  theme(plot.title=element_text(hjust=0.5), plot.subtitle=element_text(hjust=0.5))
```


## 4.2 Per taxa plots

### 4.2.1 Genus TSS Dot
```{r, fig.width=15, fig.height=50}
plot_all_taxa(ps_fs, "TSS", "Type", "Genus", "dot", colors_all)
```


### 4.2.1 Genus CSS Dot
```{r, fig.width=15, fig.height=50}
plot_all_taxa(ps_fs, "CLR", "Type", "Genus", "dot", colors_all)
```


### 4.2.2 Selected Species Plot
```{r, fig.width=5, fig.height=4}
source("MK_Microbiome_Functions.R")

plot_all_taxa(ps_obj = ps_fs,
              transformation = "TSS",
              group = "Type",
              taxa_level = "Species",
              plot_type = "dot",
              plot_colors = colors_all,
              taxa_filter = c("g__Fusobacterium_s__nucleatum", "g__Fusobacterium_s__periodonticum"))
```


### 4.2.2 Genus TSS Dot
```{r, fig.width=20, fig.height=60}
plot_all_taxa(ps_fs, "TSS", "Type", "Species", "dot", colors_all)
```

# Differential Abundance
## 6.1 ANCOMBC2

### 6.1.1 Phylum
```{r, fig.height=7, fig.width=10}
runANCOM(ps_fs, 
         tax_level = "Phylum", 
         group = "Type", 
         name_of_saved_results = "ancombc_results_phy", 
         plot_type = "dot",
         Log2FC_cutoff = 0.5,
         plot_heights = c(1,2), 
         plot_colors = colors_all)
```

### 6.1.2 Genus
```{r, fig.height=30, fig.width=10}
runANCOM(ps_fs, 
         tax_level = "Genus", 
         group = "Type", 
         name_of_saved_results = "ancombc_results_gen", 
         plot_type = "dot",
         plot_heights = c(1, 8), 
         plot_colors = colors_all )
```

### 6.1.3 Species
```{r, fig.height=45, fig.width=10}
runANCOM(ps_fs, 
         tax_level = "Species", 
         group = "Type", 
         name_of_saved_results = "ancombc_results_sp", 
         plot_type = "dot",
         #Log2FC_cutoff = 0.5,
         plot_heights = c(1, 8),
         plot_colors = colors_all )
```


## 6.2 Maaslin2

### 6.2.1 Iterate Parameters
```{r, eval=FALSE, fig.height=8, fig.width=10}
resolutions <- c("Species", "Genus", "Phylum")
iterate_maaslin2(ps_obj = ps_fs, 
                 iterative_methods = iterative_methods,
                 resolutions = resolutions,
                 group = "Type",
                 qval_threshold = .25, 
                 colors_all = maaslin2_colors, 
                 percentage = TRUE)
```

### 6.2.2 Run Maaslin2

#### Genus
```{r, fig.width=10, fig.height=65}
run_Maaslin2(ps_obj = ps_fs, 
                                 taxa_level = "Genus", 
                                 group = "Type",
                                 analysis_method = "LM", 
                                 normalization = "CSS",
                                 transform = "LOG", 
                                 plot_colors = colors_all,
                                 plot_type = "dot", 
                                 qval_threshold= 0.25, 
                                 plot_heights = c(1, 9))
```

#### Species
```{r, fig.width=10, fig.height=65}
run_Maaslin2(ps_obj = ps_fs, 
                                 taxa_level = "Species", 
                                 group = "Type",
                                 analysis_method = "LM", 
                                 normalization = "CSS",
                                 transform = "LOG", 
                                 plot_colors = colors_all,
                                 plot_type = "dot", 
                                 qval_threshold= 0.25, 
                                 plot_heights = c(1, 9))
```

## 6.3 AlDEX2

### 6.3.1 Iterate Parameters
https://www.nature.com/articles/s41467-022-28034-z

"...performed CLR transformation of each realization, and then performed Wilcoxon tests on the transformed realizations. The function then returned the expected Benjamini-Hochberg (BH) FDR-corrected p-value for each feature based on the results the different across Monte Carlo samples."

ALDEx2 uses by default the centred log-ratio (clr) transformation which is scale invariant

```{r, eval=FALSE,  fig.width=20, fig.height=12}
resolutions <- c("Species", "Genus", "Phylum")

 
iterate_aldex2(ps_obj = ps_fs, 
                 iterative_methods = iterative_methods,
                 resolutions = resolutions,
                 group = "Type",
                 percentage = FALSE)

aldex2_iterative_summary_table %>%
  filter(resolution == "Genus") %>%
  filter(paired == FALSE) %>%
  filter(paired == FALSE) %>%
  filter(denom == "all") %>%
  filter(transform == "log10") %>%
  dplyr::arrange(desc(significant_features)) %>%
  filter(significant_features > 0)

```

### 6.3.2 Run Aldex2

#### Genus
```{r, fig.width=7, fig.height=5}
run_aldex2(ps_fs, 
                  "Type", 
                  "Genus",
                  method = "wilcox.test",
                  transform = "log10",
                  normalization = "CSS", 
                 plot_colors = colors_all)
```

#### Species
```{r, fig.width=12}
run_aldex2(ps_fs, 
                  "Type", 
                  "Species",
                  method = "wilcox.test",
                  transform = "log10",
                  normalization = "CSS", 
            plot_colors = colors_all)
```


## 6.4 Combine results

### Genus
```{r, fig.height=6, fig.width=5}
DA_results_df_genus <- combine_DA(maaslin2_results_Genus, ancombc2_results_df_Genus, aldex2_res_Genus, "Type", "Genus", c(1,3), plot_colors=colors_all)
```

### Species
```{r, fig.height=10, fig.width=7}
DA_results_df <- combine_DA(maaslin2_results_Species, ancombc2_results_df_Species, aldex2_res_Species, "Type", "Species", c(1,4), plot_colors=colors_all)
```

```{r}


plot_all_taxa(ps_obj = ps_fs,
              transformation = "TSS",
              group = "Type",
              taxa_level = "Species",
              plot_type = "dot",
              plot_colors = colors_all,
              taxa_filter = c("g__Fusobacterium_s__nucleatum", "g__Fusobacterium_s__periodonticum"))
```

